Now that we've got a handle on what version control is. In this lesson, you will sign up for a GitHub account, navigate around the GitHub website to become familiar with some of its features and install and configure Git. All in preparation for linking both with your RStudio. As we previously learned, GitHub is a cloud-based management system for your version controlled files. Like Dropbox, your files are both locally on your computer and hosted online and easily accessible. Its interface allows you to manage version control and provides users with a web-based interface for creating projects, sharing them, updating code, etc. To get a GitHub account, first go to www.github.com. You will be brought to their homepage where you should fill in your information, make a username, put in your email, choose a secure password, and click sign up for GitHub. You should now be logged into GitHub. In the future, to log onto GitHub, go to github.com where you will be presented with a homepage. If you aren't already logged in, click on the sign in link at the top. Once you've done that, you will see the login page where you will enter in your username and password that you created earlier. Once logged in, you will be back at github.com but this time the screen should look like this. We're going to take a quick tour of the GitHub website and we'll particularly focus on these sections of the interface, user settings, notifications, help files, and the GitHub guide. Following this tour, will make your very first repository using the GitHub guide. First, let's look at your user settings. Now that you've logged onto GitHub, we should fill out some of your profile information and get acquainted with the account settings. In the upper right corner, there is an icon with a narrow beside it. Click this and go to your profile. This is where you control your account from and can view your contribution, histories, and repositories. Since you are just starting out, you aren't going to have any repositories or contributions yet, but hopefully we'll change that soon enough. What we can do right now is edit your profile. Go to edit profile along the left-hand edge of the page. Here, take some time and fill out your name and a little description of yourself in the bio box. If you like, upload a picture of yourself. When you are done, click update profile. Along the left-hand side of this page, there are many options for you to explore. Click through each of these menus to get familiar with the options available to you. To get you started, go to the account page. Here, you can edit your password or if you are unhappy with your username, change it. Be careful though, there can be unintended consequences when you change your username if you are just starting out and don't have any content yet, you'll probably be safe though. Continue looking through the personal setting options on your own. When you're done, go back to your profile. Once you've had a bit more experienced with GitHub, you'll eventually end up with some repositories to your name. To find those, click on the repositories link on your profile. For now, it will probably look like this. By the end of the lecture though, check back to this page to find your newly created repository. Next, we'll check out the notifications menu. Along the menu bar across the top of your window, there is a bell icon representing your notifications. Click on the bell. Once you become more active on GitHub and are collaborating with others, here is where you can find messages and notifications for all the repositories, teams, and conversations you are a part of. Along the bottom of every single page there is the help button. GitHub has a great help system in place. If you ever have a question about GitHub, this should be your first point to search. Take some time now and look through the various help files and see if any catch your eye. GitHub recognizes that this can be an overwhelming process for new users and as such have developed a mini tutorial to get you started with GitHub. Go through this guide now and create your first repository. When you're done, you should have a repository that looks something like this. Take some time to explore around the repository. Check out your commit history so far. Here you can find all of the changes that have been made to the repository and you can see who made the change, when they made the change, and provided you wrote an appropriate commit message. You can see why they made the change. Once you've explored all of the options in the repository, go back to your user profile. It should look a little different from before. Now when you are on your profile, you can see your latest repository created. For a complete listing of your repositories, click on the Repositories tab. Here you can see all of your repositories, a brief description, the time of the last edit, and along the right-hand side, there is an activity graph showing one and how many edits have been made on the repository. As you may remember from our last lecture, Git is the free and open-source version control system which GitHub is built on. One of the main benefits of using the Git system is its compatibility with RStudio. However, in order to link the two software together, we first need to download and install Git on your computer. To download Git, go to git-scm.com/download. Click on the appropriate download link for your operating system. This should initiate the download process. We'll first look at the install process for Windows computers and follow that with Mac installation steps. Follow along with the relevant instructions for your operating system. For Windows computers, once the download is finished, open the.exe file to initiate the installation wizard. If you receive a security warning, click run and to allow. Following this, click through the installation wizard generally accepting the default options unless you have a compelling reason not to. Click install and allow the wizard to complete the installation process. Following this, check the launch Git Bash option. Unless you are curious, deselect the View Release Notes box as you are probably not interested in this right now. Doing so, a command line environment will open. Provided you accepted the default options during the installation process, there will now be a start menu shortcut to launch Git Bash in the future. You have now installed Git. For Macs, we will walk you through the most common installation process. However, there are multiple ways to get Git onto your Mac. You can follow the tutorials at www.@lash.com/git/tutorials/installgitforalternativeinstallationrats. After downloading the appropriate git version for Macs, you should have downloaded a dmg file for installation on your Mac. Open this file. This will install Git on your computer. A new window will open. Double click on the PKG file and an installation wizard will open. Click through the options accepting the defaults. Click Install. When prompted, close the installation wizard. You have successfully installed Git. Now that Git is installed, we need to configure it for use with GitHub in preparation for linking it with RStudio. We need to tell Git what your username and email are so that it knows how to name each commit is coming from you. To do so, in the command prompt either Git Bash for Windows or terminal for Mac, type git config --global user.name "Jane Doe" with your desired username in place of Jane Doe. This is the name each commit will be tagged with. Following this, in the command prompt type, git config --global user.email janedoe@gmail.com making sure to use the same email address you signed up for GitHub with. At this point, you should be set for the next step. But just to check, confirm your changes by typing git config --list. Doing so, you should see the username and email you selected above. If you notice any problems or want to change these values, just retype the original config commands from earlier with your desired changes. Once you are satisfied that your username and email is correct, exit the command line by typing exit and hit enter. At this point, you are all set up for the next lecture. In this lesson, we signed up for a GitHub account and toured the GitHub website. We made your first repository and filled in some basic profile information on GitHub. Following this, we installed Git on your computer and configured it for compatibility with GitHub and RStudio.